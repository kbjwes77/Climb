<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>par_gameobject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dw = display_get_gui_width();
dh = display_get_gui_height()

shake_x = 0;
shake_y = 0;

view_x_min = 0;
view_x_max = 0;
view_y_min = 0;
view_y_max = 0;

cinematic = false;
cinematic_x = 0;
cinematic_y = 0;
cinematic_time = 0;

dialog = false;
dialog_id = noone;
dialog_color = $FFFFFF;
dialog_skippable = false;
dialog_index = 0;
dialog_length = 0;
dialog_speed = 2;
dialog_timer = 0;

focus = 0;
done = false;

tip = false;
tip_text = "";
ease_tip = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_min = +9999999;
x_max = -9999999;
y_min = +9999999;
y_max = -9999999;

var count = 0;
with (obj_player)
    {
    count++;
    if (x &lt; other.x_min)
        other.x_min = x;
    if (x &gt; other.x_max)
        other.x_max = x;
    if (y &lt; other.y_min)
        other.y_min = y;
    if (y &gt; other.y_max)
        other.y_max = y;
    }

view_x_min = lerp(view_x_min,x_min,0.5);
view_x_max = lerp(view_x_max,x_max,0.5);
view_y_min = lerp(view_y_min,y_min,0.5);
view_y_max = lerp(view_y_max,y_max,0.5);

if (!cinematic)
    {
    view_hview[0] += (max(abs(view_y_max - view_y_min)+256,768) - view_hview[0])*0.2;
    view_wview[0] = view_hview[0]*(view_wport[0]/view_hport[0]);
    
    if (count != 0)
        {
        view_xview[0] += (((view_x_max+view_x_min)/2 - view_wview[0]/2) - view_xview[0])*(0.25-0.15*focus);
        view_yview[0] += (((view_y_max+view_y_min)/2 - view_hview[0]/2) - view_yview[0])*(0.25-0.15*focus);
        }
    else
        {
        view_xview[0] = 0;
        view_yview[0] = 0;
        }
    
    view_wview[0] = round(view_wview[0]);
    view_hview[0] = round(view_hview[0]);
    view_xview[0] = round(view_xview[0]);
    view_yview[0] = round(view_yview[0]);
    }
else
    {
    view_xview[0] += ((cinematic_x-view_wview[0]/2) - view_xview[0])*0.1;
    view_yview[0] += ((cinematic_y-view_hview[0]/2) - view_yview[0])*0.1;
    }

shake_x *= 0.75;
shake_y *= 0.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ease_tip += (tip - ease_tip)*0.1;

draw_set_font(fnt_ui);

if (ease_tip &gt; 0)
    {
    var xpos = (obj_player.x-view_xview[0]);
    var ypos = (obj_player.y-view_yview[0]) - (24 + 24*ease_tip);
    var w = string_width(tip_text)+24;
    var h = string_height(tip_text)+16;
    
    draw_set_alpha(ease_tip);
    
    draw_set_color($424242);
    draw_rectangle(xpos - w/2,ypos - h/2,xpos + w/2,ypos + h/2,0);
    
    draw_set_halign(1);
    draw_set_valign(1);
    draw_set_color($000000);
    draw_text(xpos-1,ypos-1,tip_text);
    draw_text(xpos+1,ypos-1,tip_text);
    draw_text(xpos-1,ypos+1,tip_text);
    draw_text(xpos+1,ypos+1,tip_text);
    draw_set_color($CCCCCC);
    draw_text(xpos,ypos,tip_text);
    draw_set_color($000000);
    draw_set_halign(0);
    draw_set_valign(0);
    
    draw_set_alpha(1.0);
    
    tip = false;
    }

if (dialog or cinematic)
    focus += (1 - focus)*0.1;
else
    focus += (0 - focus)*0.1;

// cinematic event handling
if (cinematic)
    {
    with(obj_player)
        {
        can_move = false;
        }

    if (cinematic_time &gt; 0)
        {
        cinematic_time--;
        if (cinematic_time == 0)
            {
            cinematic = false;
            with(obj_player)
                {
                can_move = true;
                }
            }
        }
    }

if (focus &gt; 0)
    {
    draw_set_color(c_black);
    draw_rectangle(0,0,dw,128*focus,0);
    draw_rectangle(0,dh,dw,dh-128*focus,0);
    }

// text box dialogue code
if (dialog)
    {
    done = false;
    
    draw_set_color(c_dkgray);
    draw_rectangle(0+64,dh,dw-64,dh - 192*focus,0);
    
    with(obj_player)
        {
        can_move = false;
        }
    
    if (dialog_index &lt; dialog_length) and (focus &gt; 0.95)
        {
        if (dialog_timer &gt; 0)
            {
            dialog_timer--;
            }
        else
            {
            var aud = audio_play_sound(snd_dialog,0,0);
            audio_sound_pitch(aud,random_range(0.9,1));
            
            // pause for different characters for different lengths
            switch(string_char_at(dialog_string,dialog_index))
                {
                case ",":
                    dialog_timer = 10;
                    break;
                
                case ".":
                    dialog_timer = 20;
                    break;
                
                default:
                    dialog_timer = dialog_speed;
                    break;
                }
            
            dialog_index++;
            }
        }
    
    if (dialog_index &gt; 0)
        {
        draw_set_color(dialog_color);
        draw_set_halign(0);
        draw_text(128,dh - (192*focus)+64,string_copy(dialog_string,0,dialog_index));
        draw_set_color($000000);
        
        if (dialog_index == dialog_length) and ((keyboard_check_released(vk_space)) or (gamepad_button_check_released(0,gp_face1)))
            {
            done = true;
            }
        }
    
    if (dialog_skippable)
        {
        if (keyboard_check_released(vk_space)) or (gamepad_button_check_released(0,gp_face1))
            {
            done = true;
            }
        
        draw_set_alpha(0.25 + sin(current_time/600)*0.5);
        draw_set_color($E25600);
        draw_rectangle(dw/2 - 12,dh - (64*focus)-12,dw/2 + 12,dh - (64*focus)+12,0);
        draw_set_color($000000);
        draw_set_alpha(1.0);
        }
    
    if (done)
        {
        dialog = false;
        dialog_id.logic_output = true;
        dialog_id = noone;
        with(obj_player)
            {
            can_move = true;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
