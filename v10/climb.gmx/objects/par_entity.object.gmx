<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>data = ds_map_create();
input_map = ds_map_create();

save = true;
logic_input_enabled = false;
logic_output_enabled = false;

logic_output = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if a logical output device
if (logic_output_enabled)
    {
    with(par_entity)
        {
        if (id != other.id)
            {
            var map_size = ds_map_size(input_map);
            var key = ds_map_find_first(input_map);
            
            for(var i=0; i&lt;map_size; i++;)
                {
                if (ds_map_find_value(input_map,key) == other.id)
                    ds_map_replace(input_map,key,noone);
                
                key = ds_map_find_next(input_map,key);
                }
            }
        }
    }

// remove from other lists
with(obj_control)
    {
    var temp = ds_list_find_index(level_logic_objects,other.id);
    while(temp &gt; -1)
        {
        var pos = floor(temp/2);
        
        ds_list_delete(level_logic_objects,pos*2);
        ds_list_delete(level_logic_objects,pos*2);
        
        ds_list_delete(level_logic,pos*5);
        ds_list_delete(level_logic,pos*5);
        ds_list_delete(level_logic,pos*5);
        ds_list_delete(level_logic,pos*5);
        ds_list_delete(level_logic,pos*5);
        
        temp = ds_list_find_index(level_logic_objects,other.id);
        }
    
    // remove from outputs
    temp = ds_list_find_index(logic_active_outputs,other.id);
    while(temp &gt; -1)
        {
        ds_list_delete(logic_active_outputs,temp);
        temp = ds_list_find_index(logic_active_outputs,other.id);
        }
    // remove from inputs
    temp = ds_list_find_index(logic_active_inputs,other.id);
    while(temp &gt; -1)
        {
        ds_list_delete(logic_active_inputs,temp);
        temp = ds_list_find_index(logic_active_inputs,other.id);
        }
    }

ds_map_destroy(data);
ds_map_destroy(input_map);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
