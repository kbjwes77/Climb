<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>settings_load();
keybind_load();

axis_up = 0;
axis_down = 0;
axis_left = 0;
axis_right = 0;

mode = 0;
select = 0;
can_select = true;

vw = view_wview[0];
vh = view_hview[0];
dw = display_get_width();
dh = display_get_height();

ping_pos = -54;
ping_scl = 1;
ping_slot = 0;
ping_time = 0;

items[0] = 4;
menu[0,0] = "Play";
menu[0,1] = "Edit";
menu[0,2] = "Options";
menu[0,3] = "Quit";

items[1] = 6;
menu[1,0] = "Fullscreen: "+val_to_text(global.fullscreen,1);
menu[1,1] = "Screenshake: "+val_to_text(global.screenshake,0);
menu[1,2] = "SFX Volume: "+val_to_text(global.sfx_volume,0);
menu[1,3] = "BGM Volume: "+val_to_text(global.bgm_volume,0);
menu[1,4] = "Controls";
menu[1,5] = "Back";

items[2] = 10;
menu[2,0] = "Jump";
menu[2,1] = "Sprint";
menu[2,2] = "Use/Activate";
menu[2,3] = "Move Left";
menu[2,4] = "Move Right";
menu[2,5] = "Move Up";
menu[2,6] = "Move Down";
menu[2,7] = "Reset to Default";
menu[2,8] = "Button Style";
menu[2,9] = "Back";

key_name[0] = "_jump";
key_name[1] = "_sprint";
key_name[2] = "_activate";
key_name[3] = "_left";
key_name[4] = "_right";
key_name[5] = "_up";
key_name[6] = "_down";

editing = false;
edit_time = 0;
edit_slot = 0;
edit_slot_name[0] = "Keyboard";
edit_slot_name[1] = "Gamepad 1";
edit_slot_name[2] = "Gamepad 2";
edit_slot_name[3] = "Gamepad 3";
edit_slot_name[4] = "Gamepad 4";

edit_btns = 16;
edit_btn[0]  = gp_face1;
edit_btn[1]  = gp_face2;
edit_btn[2]  = gp_face3;
edit_btn[3]  = gp_face4;
edit_btn[4]  = gp_shoulderlb;
edit_btn[5]  = gp_shoulderrb;
edit_btn[6]  = gp_shoulderl;
edit_btn[7]  = gp_shoulderr;
edit_btn[8]  = gp_padu;
edit_btn[9]  = gp_padd;
edit_btn[10] = gp_padl;
edit_btn[11] = gp_padr;
edit_btn[12] = gp_stickl;
edit_btn[13] = gp_stickr;
edit_btn[14] = gp_select;
edit_btn[15] = gp_start;
edit_axes = 4;
edit_axis[0] = gp_axislh;
edit_axis[1] = gp_axislv;
edit_axis[2] = gp_axisrh;
edit_axis[3] = gp_axisrv;

btn[0] = spr_buttons_playstation;
btn[1] = spr_buttons_xbox;
if (global.button_style == 0)
    menu[2,8] = "Button Style: PLAYSTATION";
else
    menu[2,8] = "Button Style: XBOX";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gp_axis_any(gp_axislv,-1,-0.1) or gp_button_any(gp_padu)) or (keyboard_check(ord("W")) or keyboard_check(vk_up)) 
    axis_up++;
else
    axis_up = 0;
if (gp_axis_any(gp_axislv,+0.1,+1) or gp_button_any(gp_padd)) or (keyboard_check(ord("S")) or keyboard_check(vk_down)) 
    axis_down++;
else
    axis_down = 0;
if (gp_axis_any(gp_axislh,-1,-0.1) or gp_button_any(gp_padl)) or (keyboard_check(ord("A")) or keyboard_check(vk_left)) 
    axis_left++;
else
    axis_left = 0;
if (gp_axis_any(gp_axislh,+0.1,+1) or gp_button_any(gp_padr)) or (keyboard_check(ord("D")) or keyboard_check(vk_right)) 
    axis_right++;
else
    axis_right = 0;

input_up     = (axis_up == 1) or (axis_up &gt;= 40);
input_down   = (axis_down == 1) or (axis_down &gt;= 40);
input_left   = (axis_left == 1) or (axis_left &gt;= 40);
input_right  = (axis_right == 1) or (axis_right &gt;= 40);
input_select = gp_button_pressed_any(gp_face1) or keyboard_check_pressed(vk_space) or keyboard_check_pressed(ord("E"));
input_back   = gp_button_pressed_any(gp_face2) or keyboard_check_pressed(vk_escape) or keyboard_check_pressed(vk_backspace);

switch(mode)
    {
    // main menu
    case 0:
        if (input_up)
            select = clamp(select-1,0,items[mode]-1);
        if (input_down)
            select = clamp(select+1,0,items[mode]-1);
        
        draw_set_halign(1);
        draw_set_valign(1);
        
        for(var i=0; i&lt;items[mode]; i++;)
            {
            if (select == i)
                {
                var sw = string_width(menu[mode,i]);
                var sh = string_height(menu[mode,i]);
                
                draw_set_color($FFFFFF);
                draw_rectangle(vw/2 - (sw/2 + 4),192 + i*40 - (sh/2 + 4),vw/2 + (sw/2 + 4),192 + i*40 + (sh/2 + 4),0);
                draw_set_color($000000);
                draw_text(vw/2,192 + i*40,menu[mode,i]);
                }
            else
                {
                draw_set_color($FFFFFF);
                draw_text(vw/2,192 + i*40,menu[mode,i]);
                }
            }
        
        draw_set_halign(0);
        draw_set_valign(0);
        
        if (input_select)
            {
            if (select == 0)
                {
                global.edit = false;
                instance_create(0,0,obj_control);
                
                instance_destroy();
                }
            else if (select == 1)
                {
                global.edit = true;
                instance_create(0,0,obj_control);
                
                instance_destroy();
                }
            else if (select == 2)
                {
                mode = 1;
                select = 0;
                }
            else if (select == 3)
                game_end();
            }
        
        help_x = view_wview[0]/2 - 110;
        help_y = view_hview[0]   - 48;
        draw_set_color($FFFFFF);
        draw_sprite(btn[global.button_style],4,help_x    ,help_y);
        draw_sprite(btn[global.button_style],5,help_x+36 ,help_y);
        draw_text(help_x+60 ,help_y-8,"Move");
        draw_sprite(btn[global.button_style],0,help_x+140,help_y);
        draw_text(help_x+164,help_y-8,"Select");
        draw_set_color($000000);
        
        break;
    
    case 1:
        if (input_up)
            select = clamp(select-1,0,items[mode]-1);
        if (input_down)
            select = clamp(select+1,0,items[mode]-1);
        
        draw_set_halign(1);
        draw_set_valign(1);
        
        for(var i=0; i&lt;items[mode]; i++;)
            {
            if (select == i)
                {
                var sw = string_width(menu[mode,i]);
                var sh = string_height(menu[mode,i]);
                
                draw_set_color($FFFFFF);
                draw_rectangle(vw/2 - (sw/2 + 4),192 + i*40 - (sh/2 + 4),vw/2 + (sw/2 + 4),192 + i*40 + (sh/2 + 4),0);
                draw_set_color($000000);
                draw_text(vw/2,192 + i*40,menu[mode,i]);
                }
            else
                {
                draw_set_color($FFFFFF);
                draw_text(vw/2,192 + i*40,menu[mode,i]);
                }
            }
        
        draw_set_halign(0);
        draw_set_valign(0);
        
        if (input_select)
            {
            if (select == 0)
                {
                if (global.fullscreen == 1)
                    global.fullscreen = 0;
                else
                    global.fullscreen = 1;
                
                if (global.fullscreen == 1)
                    {
                    window_set_fullscreen(true);
                    
                    view_wview[0] = display_get_width();
                    view_hview[0] = display_get_height();
                    surface_resize(application_surface,view_wview[0],view_hview[0]);
                    display_set_gui_size(view_wview[0],view_hview[0]);
                    vw = view_wview[0];
                    vh = view_hview[0];
                    }
                else if (global.fullscreen == 0)
                    {
                    window_set_fullscreen(false);
                    
                    view_wview[0] = 800;
                    view_hview[0] = 600;
                    window_set_size(view_wview[0],view_hview[0]);
                    surface_resize(application_surface,view_wview[0],view_hview[0]);
                    display_set_gui_size(view_wview[0],view_hview[0]);
                    vw = view_wview[0];
                    vh = view_hview[0];
                    }
                
                menu[1,0] = "Fullscreen: "+val_to_text(global.fullscreen,1);
                }
            else if (select == 1)
                {
                if (global.screenshake &gt;= 0)
                    global.screenshake -= 0.25;
                
                if (global.screenshake &lt; 0)
                    global.screenshake = 1.0;
                
                menu[1,1] = "Screenshake: "+val_to_text(global.screenshake,0);
                }
            else if (select == 2)
                {
                if (global.sfx_volume &gt;= 0)
                    global.sfx_volume -= 0.25;
                
                if (global.sfx_volume &lt; 0)
                    global.sfx_volume = 1.0;
                
                menu[1,2] = "SFX Volume: "+val_to_text(global.sfx_volume,0);
                }
            else if (select == 3)
                {
                if (global.bgm_volume &gt;= 0)
                    global.bgm_volume -= 0.25;
                
                if (global.bgm_volume &lt; 0)
                    global.bgm_volume = 1.0;
                
                menu[1,3] = "BGM Volume: "+val_to_text(global.bgm_volume,0);
                }
            else if (select == 4)
                {
                mode = 2;
                select = 0;
                }
            }
        
        // back
        if (input_back or (input_select and select = 5))
            {
            settings_save();
            mode = 0;
            select = 2;
            }
        
        help_x = view_wview[0]/2 - 170;
        help_y = view_hview[0]   - 48;
        draw_set_color($FFFFFF);
        draw_sprite(btn[global.button_style],4,help_x    ,help_y);
        draw_sprite(btn[global.button_style],5,help_x+36 ,help_y);
        draw_text(help_x+60 ,help_y-8,"Move");
        draw_sprite(btn[global.button_style],0,help_x+140,help_y);
        draw_text(help_x+164,help_y-8,"Select");
        draw_sprite(btn[global.button_style],2,help_x+250,help_y);
        draw_text(help_x+274,help_y-8,"Back");
        draw_set_color($000000);
        
        break;
    
    case 2:
        if (can_select)
            {
            if (input_up)
                select = max(select-1,0);
            if (input_down)
                select = min(select+1,10);
            
            if (input_left)
                edit_slot = clamp(edit_slot-1,0,max(5-1,0));
            if (input_right)
                edit_slot = clamp(edit_slot+1,0,max(5-1,0));
            }
        
        if (editing)
            {
            edit_time = 10;
            
            if (edit_slot == 0)
                {
                if (keyboard_check_pressed(vk_anykey))
                    {
                    var last_key = -1;
                    if (keyboard_check_pressed(vk_control))
                        last_key = vk_control;
                    else if (keyboard_check_pressed(vk_shift))
                        last_key = vk_shift;
                    else if (keyboard_check_pressed(vk_space))
                        last_key = vk_space;
                    else if (keyboard_check_pressed(vk_up))
                        last_key = vk_up;
                    else if (keyboard_check_pressed(vk_down))
                        last_key = vk_down;
                    else if (keyboard_check_pressed(vk_left))
                        last_key = vk_left;
                    else if (keyboard_check_pressed(vk_right))
                        last_key = vk_right;
                    else if (keyboard_check_pressed(vk_numpad0))
                        last_key = vk_numpad0;
                    else if (keyboard_check_pressed(vk_numpad1))
                        last_key = vk_numpad1;
                    else if (keyboard_check_pressed(vk_numpad2))
                        last_key = vk_numpad2;
                    else if (keyboard_check_pressed(vk_numpad3))
                        last_key = vk_numpad3;
                    else if (keyboard_check_pressed(vk_numpad4))
                        last_key = vk_numpad4;
                    else if (keyboard_check_pressed(vk_numpad5))
                        last_key = vk_numpad5;
                    else if (keyboard_check_pressed(vk_numpad6))
                        last_key = vk_numpad6;
                    else if (keyboard_check_pressed(vk_numpad7))
                        last_key = vk_numpad7;
                    else if (keyboard_check_pressed(vk_numpad8))
                        last_key = vk_numpad8;
                    else if (keyboard_check_pressed(vk_numpad9))
                        last_key = vk_numpad9;
                    else
                        {
                        if (keyboard_lastkey &gt;= 65 and keyboard_lastkey &lt;= 90) or (keyboard_lastkey &gt;= 48 and keyboard_lastkey &lt;= 57)
                            last_key = keyboard_lastkey;
                        }
                    
                    if (last_key != -1)
                        {
                        global.keybind[?"kb" + string(key_name[select])]         = last_key;
                        global.keybind[?"kb" + string(key_name[select])+"_type"] = 0;
                        
                        editing = false;
                        }
                    }
                }
            else
                {
                var pressed = -1;
                var pressed_sign = 0;
                for(var i=0; i&lt;edit_btns; i++;)
                    {
                    if (gamepad_button_check_pressed(edit_slot-1,edit_btn[i]))
                        pressed = edit_btn[i];
                    }
                for(var i=0; i&lt;edit_axes; i++;)
                    {
                    var axis = gamepad_axis_value(edit_slot-1,edit_axis[i]);
                    if (abs(axis) &gt; 0.1)
                        {
                        pressed = edit_axis[i];
                        pressed_sign = sign(axis);
                        }
                    }
                if (pressed &gt; -1)
                    {
                    global.keybind[?"gp" + string(edit_slot-1) + string(key_name[select])]         = pressed;
                    global.keybind[?"gp" + string(edit_slot-1) + string(key_name[select])+"_type"] = pressed_sign;
                    
                    editing = false;
                    }
                }
            }
        else
            {
            if (!can_select)
                {
                if (edit_time &gt; 0)
                    edit_time--;
                else
                    {
                    can_select = true;
                    }
                }
            }
        
        draw_set_halign(1);
        draw_set_valign(1);
        
        var edit_x = view_wview[0]/2 - (5*128)/2;
        var edit_y = 96;
        for(var i=0; i&lt;5; i++;)
            {
            draw_set_color($FFFFFF);
            if (i == edit_slot)
                {
                draw_rectangle(edit_x + i*128,edit_y,edit_x + (i+1)*128,edit_y+32,0);
                draw_set_color($000000);
                draw_text(edit_x + i*128 + 64,edit_y + 16,edit_slot_name[i]);
                }
            else
                draw_text(edit_x + i*128 + 64,edit_y + 16,edit_slot_name[i]);
            }
        
        if (edit_slot == 0)
            {
            for(var i=0; i&lt;7; i++;)
                {
                if (select == i)
                    {
                    var sw1 = string_width(menu[mode,i]);
                    var sh1 = string_height(menu[mode,i]);
                    
                    if (editing)
                        {
                        var sw2 = string_width("Press Any Key");
                        var sh2 = string_height("Press Any Key");
                        
                        draw_set_color($FFFFFF);
                        draw_rectangle((vw/2 - 128) - (sw1/2 + 4),192 + i*40 - (sh1/2 + 4),(vw/2 - 128) + (sw1/2 + 4),192 + i*40 + (sh1/2 + 4),0);
                        draw_rectangle((vw/2 + 128) - (sw2/2 + 4),192 + i*40 - (sh2/2 + 4),(vw/2 + 128) + (sw2/2 + 4),192 + i*40 + (sh2/2 + 4),0);
                        draw_set_color($000000);
                        draw_text((vw/2 - 128),192 + i*40,menu[mode,i]);
                        draw_text((vw/2 + 128),192 + i*40,"Press Any Key");
                        }
                    else
                        {
                        draw_set_color($FFFFFF);
                        draw_rectangle((vw/2 - 128) - (sw1/2 + 4),192 + i*40 - (sh1/2 + 4),(vw/2 - 128) + (sw1/2 + 4),192 + i*40 + (sh1/2 + 4),0);
                        draw_text((vw/2 + 128),192 + i*40, keybind_name("kb"+string(key_name[i])) );
                        draw_set_color($000000);
                        draw_text((vw/2 - 128),192 + i*40,menu[mode,i]);
                        }
                    }
                else
                    {
                    draw_set_color($FFFFFF);
                    draw_text((vw/2 + 128),192 + i*40, keybind_name("kb"+string(key_name[i])) );
                    draw_text((vw/2 - 128),192 + i*40,menu[mode,i]);
                    }
                }
            }
        else
            {
            for(var i=0; i&lt;7; i++;)
                {
                if (select == i)
                    {
                    var sw1 = string_width(menu[mode,i]);
                    var sh1 = string_height(menu[mode,i]);
                    
                    if (editing)
                        {
                        var sw2 = string_width("Press Any Button");
                        var sh2 = string_height("Press Any Button");
                        
                        draw_set_color($FFFFFF);
                        draw_rectangle((vw/2 - 128) - (sw1/2 + 4),192 + i*40 - (sh1/2 + 4),(vw/2 - 128) + (sw1/2 + 4),192 + i*40 + (sh1/2 + 4),0);
                        draw_rectangle((vw/2 + 128) - (sw2/2 + 4),192 + i*40 - (sh2/2 + 4),(vw/2 + 128) + (sw2/2 + 4),192 + i*40 + (sh2/2 + 4),0);
                        draw_set_color($000000);
                        draw_text((vw/2 - 128),192 + i*40,menu[mode,i]);
                        draw_text((vw/2 + 128),192 + i*40,"Press Any Button");
                        }
                    else
                        {
                        draw_set_color($FFFFFF);
                        draw_rectangle((vw/2 - 128) - (sw1/2 + 4),192 + i*40 - (sh1/2 + 4),(vw/2 - 128) + (sw1/2 + 4),192 + i*40 + (sh1/2 + 4),0);
                        draw_text((vw/2 + 128),192 + i*40,keybind_name( "gp"+string(edit_slot-1) + string(key_name[i]) ));
                        draw_set_color($000000);
                        draw_text((vw/2 - 128),192 + i*40,menu[mode,i]);
                        }
                    }
                else
                    {
                    draw_set_color($FFFFFF);
                    draw_text((vw/2 + 128),192 + i*40,keybind_name( "gp"+string(edit_slot-1) + string(key_name[i]) ));
                    draw_text((vw/2 - 128),192 + i*40,menu[mode,i]);
                    }
                }
            }
        
        for(var i=7; i&lt;10; i++;)
            {
            if (select == i)
                {
                var sw = string_width(menu[mode,i]);
                var sh = string_height(menu[mode,i]);
                
                draw_set_color($FFFFFF);
                draw_rectangle(vw/2 - (sw/2 + 4),224 + i*40 - (sh/2 + 4),vw/2 + (sw/2 + 4),224 + i*40 + (sh/2 + 4),0);
                draw_set_color($000000);
                draw_text(vw/2,224 + i*40,menu[mode,i]);
                }
            else
                {
                draw_set_color($FFFFFF);
                draw_text(vw/2,224 + i*40,menu[mode,i]);
                }
            }
        
        draw_set_halign(0);
        draw_set_valign(0);
        
        if (can_select)
            {
            if (input_select)
                {
                if (select &lt;= 6)
                    {
                    editing = true;
                    edit_time = 0;
                    can_select = false;
                    }
                else if (select == 7)
                    {
                    
                    }
                else if (select == 8)
                    {
                    if (global.button_style == 0)
                        {
                        global.button_style = 1;
                        menu[2,8] = "Button Style: XBOX";
                        }
                    else
                        {
                        global.button_style = 0;
                        menu[2,8] = "Button Style: PLAYSTATION";
                        }
                    }
                }
            
            // back
            if (input_back or (input_select and select = 9))
                {
                mode = 1;
                select = 4;
                
                keybind_save();
                }
            }
        
        help_x = view_wview[0]/2 - 170;
        help_y = view_hview[0]   - 48;
        draw_set_color($FFFFFF);
        draw_sprite(btn[global.button_style],4,help_x    ,help_y);
        draw_sprite(btn[global.button_style],5,help_x+36 ,help_y);
        draw_text(help_x+60 ,help_y-8,"Move");
        draw_sprite(btn[global.button_style],0,help_x+140,help_y);
        draw_text(help_x+164,help_y-8,"Select");
        draw_sprite(btn[global.button_style],2,help_x+250,help_y);
        draw_text(help_x+274,help_y-8,"Back");
        draw_set_color($000000);
        
        break;
    }

for(var i=0; i&lt;4; i++;)
    {
    if (gamepad_button_check_pressed(i,gp_select))
        {
        ping_slot = i;
        ping_time = 90;
        ping_scl = 1.2;
        }
    }

if (ping_pos &gt; -54)
    {
    draw_set_halign(1);
    draw_set_valign(1);
    
    draw_sprite_ext(spr_gamepad,0,ping_pos+1,view_hview[0]-48+1,ping_scl,ping_scl,0,-1,1);
    draw_sprite_ext(spr_gamepad,0,ping_pos+1,view_hview[0]-48-1,ping_scl,ping_scl,0,-1,1);
    draw_sprite_ext(spr_gamepad,0,ping_pos-1,view_hview[0]-48+1,ping_scl,ping_scl,0,-1,1);
    draw_sprite_ext(spr_gamepad,0,ping_pos-1,view_hview[0]-48-1,ping_scl,ping_scl,0,-1,1);
    draw_sprite_ext(spr_gamepad,1,ping_pos,view_hview[0]-48,ping_scl,ping_scl,0,-1,1);
    
    draw_set_color($FFFFFF);
    draw_text(ping_pos,view_hview[0]-48,string(ping_slot+1));
    draw_set_color($000000);
    
    draw_set_halign(0);
    draw_set_valign(0);
    }

ping_scl += (1-ping_scl)*0.2;
if (ping_time &gt; 0)
    {
    ping_time--;
    ping_pos += (+54 - ping_pos)*0.1;
    }
else
    ping_pos += (-54 - ping_pos)*0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
